{"ast":null,"code":"import { storageService } from './async-storage.service.js';\nimport { utilService } from './util.service.js';\nimport { userService } from './user.service.js';\nimport { cloneElement } from 'react';\nconst STORAGE_KEY = 'task';\nexport const taskService = {\n  query,\n  getById,\n  save,\n  remove,\n  getEmptyTask,\n  addTaskMsg\n};\nwindow.cs = taskService;\nasync function query() {\n  let filterBy = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    txt: ''\n  };\n  var tasks = await storageService.query(STORAGE_KEY);\n  if (filterBy.txt) {\n    const regex = new RegExp(filterBy.txt, 'i');\n    tasks = tasks.filter(task => regex.test(task.txt) || regex.test(task.description));\n  }\n  if (filterBy.price) {\n    tasks = tasks.filter(task => task.price <= filterBy.price);\n  }\n  return tasks;\n}\nasync function getById(taskId) {\n  try {\n    await storageService.get(STORAGE_KEY, taskId);\n  } catch (err) {\n    console.error(\"err\", err);\n  }\n}\nasync function remove(taskId) {\n  try {\n    await storageService.remove(STORAGE_KEY, taskId);\n  } catch (err) {\n    console.error(\"err\", err);\n  }\n}\nasync function save(task) {\n  var savedTask;\n  if (task._id) {\n    savedTask = await storageService.put(STORAGE_KEY, task);\n  } else {\n    task.owner = userService.getLoggedinUser();\n    savedTask = await storageService.post(STORAGE_KEY, task);\n  }\n  return savedTask;\n}\nasync function addTaskMsg(taskId, txt) {\n  // Later, this is all done by the backend\n  const task = await getById(taskId);\n  if (!task.msgs) task.msgs = [];\n  const msg = {\n    id: utilService.makeId(),\n    by: userService.getLoggedinUser(),\n    txt\n  };\n  task.msgs.push(msg);\n  await storageService.put(STORAGE_KEY, task);\n  return msg;\n}\nfunction getEmptyTask() {\n  return {\n    id: utilService.makeId(),\n    title: '',\n    // creator: '',\n    // collaborators: '',\n    status: '',\n    duration: '',\n    timeline: '',\n    priority: '',\n    txt: '',\n    // comments: [],\n    createdAt: Date.now()\n  };\n}\n\n// \"tasks\": [\n//     {\n//         \"id\": \"c103\",\n//         \"title\": \"Do that\",\n//         \"archivedAt\": 1589983468418,\n//     },\n//     {\n//         \"id\": \"c104\",\n//         \"title\": \"Help me\",\n//         \"status\": \"in-progress\", // monday\n//         \"priority\": \"high\",\n//         \"description\": \"description\",\n//         \"comments\": [\n//             {\n//                 \"id\": \"ZdPnm\",\n//                 \"txt\": \"also @yaronb please CR this\",\n//                 \"createdAt\": 1590999817436,\n//                 \"byMember\": {\n//                     \"_id\": \"u101\",\n//                     \"fullname\": \"Tal Tarablus\",\n//                     \"imgUrl\": \"http://res.cloudinary.com/shaishar9/image/upload/v1590850482/j1glw3c9jsoz2py0miol.jpg\"\n//                 }\n//             }\n//         ],\n//         \"checklists\": [\n//             {\n//                 \"id\": \"YEhmF\",\n//                 \"title\": \"Checklist\",\n//                 \"todos\": [\n//                     {\n//                         \"id\": \"212jX\",\n//                         \"title\": \"To Do 1\",\n//                         \"isDone\": false\n//                     }\n//                 ]\n//             }\n//         ]\n\n// export function TaskPreview({ task }) {\n//     //GET FROM STORE\n//     const cmpsOrder = [\n//       \"status-picker\",\n//       \"member-picker\",\n//       \"date-picker\",\n//       \"priority-picker\",\n//     ];\n//     return (\n//       <section>\n//         <h5>{task.txt}</h5>\n//         {cmpsOrder.map((cmp, idx) => {\n//           return (\n//             <DynamicCmp\n//               cmp={cmp}\n//               key={idx}\n//               onUpdate={(data) => {\n//                 console.log(\"Updating: \", cmp, \"with data:\", data);\n//                 // make a copy, update the task, create an action\n//                 // Call action: updateTask(task, action)\n//               }}\n//             />\n//           );\n//         })}\n//       </section>\n//     );\n//   }","map":{"version":3,"names":["storageService","utilService","userService","cloneElement","STORAGE_KEY","taskService","query","getById","save","remove","getEmptyTask","addTaskMsg","window","cs","filterBy","arguments","length","undefined","txt","tasks","regex","RegExp","filter","task","test","description","price","taskId","get","err","console","error","savedTask","_id","put","owner","getLoggedinUser","post","msgs","msg","id","makeId","by","push","title","status","duration","timeline","priority","createdAt","Date","now"],"sources":["C:/Users/Roni/Desktop/Local Dev/Monday/dev/Sunday/frontend/src/services/task.service.js"],"sourcesContent":["import { storageService } from './async-storage.service.js'\r\nimport { utilService } from './util.service.js'\r\nimport { userService } from './user.service.js'\r\nimport { cloneElement } from 'react'\r\n\r\nconst STORAGE_KEY = 'task'\r\n\r\nexport const taskService = {\r\n    query,\r\n    getById,\r\n    save,\r\n    remove,\r\n    getEmptyTask,\r\n    addTaskMsg\r\n}\r\nwindow.cs = taskService\r\n\r\n\r\nasync function query(filterBy = { txt: '' }) {\r\n    var tasks = await storageService.query(STORAGE_KEY)\r\n    if (filterBy.txt) {\r\n        const regex = new RegExp(filterBy.txt, 'i')\r\n        tasks = tasks.filter(task => regex.test(task.txt) || regex.test(task.description))\r\n    }\r\n    if (filterBy.price) {\r\n        tasks = tasks.filter(task => task.price <= filterBy.price)\r\n    }\r\n    return tasks\r\n}\r\n\r\nasync function getById(taskId) {\r\n    try {\r\n        await storageService.get(STORAGE_KEY, taskId)\r\n    } catch (err) {\r\n        console.error(\"err\", err)\r\n    }\r\n}\r\n\r\nasync function remove(taskId) {\r\n    try {\r\n        await storageService.remove(STORAGE_KEY, taskId)\r\n    } catch (err) {\r\n        console.error(\"err\", err)\r\n    }\r\n}\r\n\r\nasync function save(task) {\r\n    var savedTask\r\n    if (task._id) {\r\n        savedTask = await storageService.put(STORAGE_KEY, task)\r\n    } else {\r\n        task.owner = userService.getLoggedinUser()\r\n        savedTask = await storageService.post(STORAGE_KEY, task)\r\n    }\r\n    return savedTask\r\n}\r\n\r\nasync function addTaskMsg(taskId, txt) {\r\n    // Later, this is all done by the backend\r\n    const task = await getById(taskId)\r\n    if (!task.msgs) task.msgs = []\r\n\r\n    const msg = {\r\n        id: utilService.makeId(),\r\n        by: userService.getLoggedinUser(),\r\n        txt\r\n    }\r\n    task.msgs.push(msg)\r\n    await storageService.put(STORAGE_KEY, task)\r\n\r\n    return msg\r\n}\r\n\r\nfunction getEmptyTask() {\r\n    return {\r\n        id: utilService.makeId(),\r\n        title: '',\r\n        // creator: '',\r\n        // collaborators: '',\r\n        status: '',\r\n        duration: '',\r\n        timeline: '',\r\n        priority: '',\r\n        txt: '',\r\n        // comments: [],\r\n        createdAt: Date.now(),\r\n    }\r\n}\r\n\r\n// \"tasks\": [\r\n//     {\r\n//         \"id\": \"c103\",\r\n//         \"title\": \"Do that\",\r\n//         \"archivedAt\": 1589983468418,\r\n//     },\r\n//     {\r\n//         \"id\": \"c104\",\r\n//         \"title\": \"Help me\",\r\n//         \"status\": \"in-progress\", // monday\r\n//         \"priority\": \"high\",\r\n//         \"description\": \"description\",\r\n//         \"comments\": [\r\n//             {\r\n//                 \"id\": \"ZdPnm\",\r\n//                 \"txt\": \"also @yaronb please CR this\",\r\n//                 \"createdAt\": 1590999817436,\r\n//                 \"byMember\": {\r\n//                     \"_id\": \"u101\",\r\n//                     \"fullname\": \"Tal Tarablus\",\r\n//                     \"imgUrl\": \"http://res.cloudinary.com/shaishar9/image/upload/v1590850482/j1glw3c9jsoz2py0miol.jpg\"\r\n//                 }\r\n//             }\r\n//         ],\r\n//         \"checklists\": [\r\n//             {\r\n//                 \"id\": \"YEhmF\",\r\n//                 \"title\": \"Checklist\",\r\n//                 \"todos\": [\r\n//                     {\r\n//                         \"id\": \"212jX\",\r\n//                         \"title\": \"To Do 1\",\r\n//                         \"isDone\": false\r\n//                     }\r\n//                 ]\r\n//             }\r\n//         ]\r\n\r\n// export function TaskPreview({ task }) {\r\n//     //GET FROM STORE\r\n//     const cmpsOrder = [\r\n//       \"status-picker\",\r\n//       \"member-picker\",\r\n//       \"date-picker\",\r\n//       \"priority-picker\",\r\n//     ];\r\n//     return (\r\n//       <section>\r\n//         <h5>{task.txt}</h5>\r\n//         {cmpsOrder.map((cmp, idx) => {\r\n//           return (\r\n//             <DynamicCmp\r\n//               cmp={cmp}\r\n//               key={idx}\r\n//               onUpdate={(data) => {\r\n//                 console.log(\"Updating: \", cmp, \"with data:\", data);\r\n//                 // make a copy, update the task, create an action\r\n//                 // Call action: updateTask(task, action)\r\n//               }}\r\n//             />\r\n//           );\r\n//         })}\r\n//       </section>\r\n//     );\r\n//   }"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}