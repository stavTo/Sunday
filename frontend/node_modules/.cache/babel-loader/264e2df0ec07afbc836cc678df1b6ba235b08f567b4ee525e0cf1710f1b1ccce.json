{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Roni\\\\Desktop\\\\Local Dev\\\\Monday\\\\dev\\\\Sunday\\\\frontend\\\\src\\\\pages\\\\board-details.jsx\",\n  _s = $RefreshSig$();\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { BoardList } from '../cmps/board-list';\nimport { BoardHeader } from '../cmps/board-header';\nimport { GroupList } from '../cmps/group-list';\nimport { boardService } from '../services/board.service.local';\nimport { useEffect, useState } from 'react';\nimport { showErrorMsg } from '../services/event-bus.service';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function BoardDetails() {\n  _s();\n  const {\n    boardId\n  } = useParams();\n  const [board, setBoard] = useState(boardService.getEmptyBoard());\n  useEffect(() => {\n    if (boardId) loadBoard();\n  }, [boardId]);\n  async function loadBoard() {\n    try {\n      const board = await boardService.getById(boardId);\n      setBoard(board);\n    } catch (err) {\n      console.log(err);\n      showErrorMsg(`Board ${boardId} does not exists.`);\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"board-details\",\n    children: [/*#__PURE__*/_jsxDEV(BoardList, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"board-container\",\n      children: [/*#__PURE__*/_jsxDEV(BoardHeader, {\n        board: board\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(GroupList, {\n        groups: board.groups\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 3\n  }, this);\n}\n_s(BoardDetails, \"JaDkXtcUeldQsvpPkWm1cuht8cc=\", false, function () {\n  return [useParams];\n});\n_c = BoardDetails;\nvar _c;\n$RefreshReg$(_c, \"BoardDetails\");","map":{"version":3,"names":["useNavigate","useParams","BoardList","BoardHeader","GroupList","boardService","useEffect","useState","showErrorMsg","jsxDEV","_jsxDEV","BoardDetails","_s","boardId","board","setBoard","getEmptyBoard","loadBoard","getById","err","console","log","className","children","fileName","_jsxFileName","lineNumber","columnNumber","groups","_c","$RefreshReg$"],"sources":["C:/Users/Roni/Desktop/Local Dev/Monday/dev/Sunday/frontend/src/pages/board-details.jsx"],"sourcesContent":["import { useNavigate, useParams } from 'react-router-dom'\r\nimport { BoardList } from '../cmps/board-list'\r\nimport { BoardHeader } from '../cmps/board-header'\r\nimport { GroupList } from '../cmps/group-list'\r\nimport { boardService } from '../services/board.service.local'\r\nimport { useEffect, useState } from 'react'\r\nimport { showErrorMsg } from '../services/event-bus.service'\r\n\r\nexport function BoardDetails() {\r\n\tconst { boardId } = useParams()\r\n\tconst [board, setBoard] = useState(boardService.getEmptyBoard())\r\n\tuseEffect(() => {\r\n\t\tif (boardId) loadBoard()\r\n\t}, [boardId])\r\n\r\n\tasync function loadBoard() {\r\n\t\ttry {\r\n\t\t\tconst board = await boardService.getById(boardId)\r\n\t\t\tsetBoard(board)\r\n\t\t} catch (err) {\r\n\t\t\tconsole.log(err)\r\n\t\t\tshowErrorMsg(`Board ${boardId} does not exists.`)\r\n\t\t}\r\n\t}\r\n\treturn (\r\n\t\t<section className=\"board-details\">\r\n\t\t\t<BoardList />\r\n\t\t\t<section className=\"board-container\">\r\n\t\t\t\t<BoardHeader board={board} />\r\n\t\t\t\t<GroupList groups={board.groups} />\r\n\t\t\t</section>\r\n\t\t</section>\r\n\t)\r\n}\r\n"],"mappings":";;AAAA,SAASA,WAAW,EAAEC,SAAS,QAAQ,kBAAkB;AACzD,SAASC,SAAS,QAAQ,oBAAoB;AAC9C,SAASC,WAAW,QAAQ,sBAAsB;AAClD,SAASC,SAAS,QAAQ,oBAAoB;AAC9C,SAASC,YAAY,QAAQ,iCAAiC;AAC9D,SAASC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,YAAY,QAAQ,+BAA+B;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE5D,OAAO,SAASC,YAAYA,CAAA,EAAG;EAAAC,EAAA;EAC9B,MAAM;IAAEC;EAAQ,CAAC,GAAGZ,SAAS,CAAC,CAAC;EAC/B,MAAM,CAACa,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAACF,YAAY,CAACW,aAAa,CAAC,CAAC,CAAC;EAChEV,SAAS,CAAC,MAAM;IACf,IAAIO,OAAO,EAAEI,SAAS,CAAC,CAAC;EACzB,CAAC,EAAE,CAACJ,OAAO,CAAC,CAAC;EAEb,eAAeI,SAASA,CAAA,EAAG;IAC1B,IAAI;MACH,MAAMH,KAAK,GAAG,MAAMT,YAAY,CAACa,OAAO,CAACL,OAAO,CAAC;MACjDE,QAAQ,CAACD,KAAK,CAAC;IAChB,CAAC,CAAC,OAAOK,GAAG,EAAE;MACbC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;MAChBX,YAAY,CAAE,SAAQK,OAAQ,mBAAkB,CAAC;IAClD;EACD;EACA,oBACCH,OAAA;IAASY,SAAS,EAAC,eAAe;IAAAC,QAAA,gBACjCb,OAAA,CAACR,SAAS;MAAAsB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACbjB,OAAA;MAASY,SAAS,EAAC,iBAAiB;MAAAC,QAAA,gBACnCb,OAAA,CAACP,WAAW;QAACW,KAAK,EAAEA;MAAM;QAAAU,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAC7BjB,OAAA,CAACN,SAAS;QAACwB,MAAM,EAAEd,KAAK,CAACc;MAAO;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC3B,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEZ;AAACf,EAAA,CAzBeD,YAAY;EAAA,QACPV,SAAS;AAAA;AAAA4B,EAAA,GADdlB,YAAY;AAAA,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}