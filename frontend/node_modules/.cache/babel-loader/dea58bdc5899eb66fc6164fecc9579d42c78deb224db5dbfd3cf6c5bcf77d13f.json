{"ast":null,"code":"import { storageService } from './async-storage.service';\nimport { httpService } from './http.service';\nconst STORAGE_KEY_LOGGEDIN_USER = 'loggedInUser';\nexport const userService = {\n  login,\n  logout,\n  signup,\n  getLoggedInUser,\n  saveLocalUser,\n  getUsers,\n  getById,\n  remove,\n  update,\n  changeScore\n};\nwindow.userService = userService;\nfunction getUsers() {\n  return storageService.query('user');\n  // return httpService.get(`user`)\n}\n\nasync function getById(userId) {\n  const user = await storageService.get('user', userId);\n  // const user = await httpService.get(`user/${userId}`)\n  return user;\n}\nfunction remove(userId) {\n  return storageService.remove('user', userId);\n  // return httpService.delete(`user/${userId}`)\n}\n\nasync function update(_ref) {\n  let {\n    _id,\n    score\n  } = _ref;\n  const user = await storageService.get('user', _id);\n  user.score = score;\n  await storageService.put('user', user);\n\n  // const user = await httpService.put(`user/${_id}`, {_id, score})\n  // Handle case in which admin updates other user's details\n  if (getLoggedInUser()._id === user._id) saveLocalUser(user);\n  return user;\n}\nasync function login(userCred) {\n  const users = await storageService.query('user');\n  const user = users.find(user => user.username === userCred.username);\n  // const user = await httpService.post('auth/login', userCred)\n  if (user) {\n    return saveLocalUser(user);\n  }\n}\nasync function signup(userCred) {\n  userCred.score = 10000;\n  if (!userCred.imgUrl) userCred.imgUrl = 'https://cdn.pixabay.com/photo/2020/07/01/12/58/icon-5359553_1280.png';\n  const user = await storageService.post('user', userCred);\n  // const user = await httpService.post('auth/signup', userCred)\n  return saveLocalUser(user);\n}\nasync function logout() {\n  sessionStorage.removeItem(STORAGE_KEY_LOGGEDIN_USER);\n  // return await httpService.post('auth/logout')\n}\n\nasync function changeScore(by) {\n  const user = getLoggedInUser();\n  if (!user) throw new Error('Not loggedIn');\n  user.score = user.score + by || by;\n  await update(user);\n  return user.score;\n}\nfunction saveLocalUser(user) {\n  user = {\n    _id: user._id,\n    fullname: user.fullname,\n    imgUrl: user.imgUrl,\n    score: user.score\n  };\n  sessionStorage.setItem(STORAGE_KEY_LOGGEDIN_USER, JSON.stringify(user));\n  return user;\n}\nfunction getLoggedInUser() {\n  return JSON.parse(sessionStorage.getItem(STORAGE_KEY_LOGGEDIN_USER));\n}\n\n// ;(async ()=>{\n//     await userService.signup({fullname: 'Puki Norma', username: 'puki', password:'123',score: 10000, isAdmin: false})\n//     await userService.signup({fullname: 'Master Adminov', username: 'admin', password:'123', score: 10000, isAdmin: true})\n//     await userService.signup({fullname: 'Muki G', username: 'muki', password:'123', score: 10000})\n// })()","map":{"version":3,"names":["storageService","httpService","STORAGE_KEY_LOGGEDIN_USER","userService","login","logout","signup","getLoggedInUser","saveLocalUser","getUsers","getById","remove","update","changeScore","window","query","userId","user","get","_ref","_id","score","put","userCred","users","find","username","imgUrl","post","sessionStorage","removeItem","by","Error","fullname","setItem","JSON","stringify","parse","getItem"],"sources":["C:/Users/Roni/Desktop/Local Dev/Monday/dev/Sunday/frontend/src/services/user.service.js"],"sourcesContent":["import { storageService } from './async-storage.service'\r\nimport { httpService } from './http.service'\r\n\r\nconst STORAGE_KEY_LOGGEDIN_USER = 'loggedInUser'\r\n\r\nexport const userService = {\r\n\tlogin,\r\n\tlogout,\r\n\tsignup,\r\n\tgetLoggedInUser,\r\n\tsaveLocalUser,\r\n\tgetUsers,\r\n\tgetById,\r\n\tremove,\r\n\tupdate,\r\n\tchangeScore,\r\n}\r\n\r\nwindow.userService = userService\r\n\r\nfunction getUsers() {\r\n\treturn storageService.query('user')\r\n\t// return httpService.get(`user`)\r\n}\r\n\r\nasync function getById(userId) {\r\n\tconst user = await storageService.get('user', userId)\r\n\t// const user = await httpService.get(`user/${userId}`)\r\n\treturn user\r\n}\r\n\r\nfunction remove(userId) {\r\n\treturn storageService.remove('user', userId)\r\n\t// return httpService.delete(`user/${userId}`)\r\n}\r\n\r\nasync function update({ _id, score }) {\r\n\tconst user = await storageService.get('user', _id)\r\n\tuser.score = score\r\n\tawait storageService.put('user', user)\r\n\r\n\t// const user = await httpService.put(`user/${_id}`, {_id, score})\r\n\t// Handle case in which admin updates other user's details\r\n\tif (getLoggedInUser()._id === user._id) saveLocalUser(user)\r\n\treturn user\r\n}\r\n\r\nasync function login(userCred) {\r\n\tconst users = await storageService.query('user')\r\n\tconst user = users.find(user => user.username === userCred.username)\r\n\t// const user = await httpService.post('auth/login', userCred)\r\n\tif (user) {\r\n\t\treturn saveLocalUser(user)\r\n\t}\r\n}\r\nasync function signup(userCred) {\r\n\tuserCred.score = 10000\r\n\tif (!userCred.imgUrl) userCred.imgUrl = 'https://cdn.pixabay.com/photo/2020/07/01/12/58/icon-5359553_1280.png'\r\n\tconst user = await storageService.post('user', userCred)\r\n\t// const user = await httpService.post('auth/signup', userCred)\r\n\treturn saveLocalUser(user)\r\n}\r\nasync function logout() {\r\n\tsessionStorage.removeItem(STORAGE_KEY_LOGGEDIN_USER)\r\n\t// return await httpService.post('auth/logout')\r\n}\r\n\r\nasync function changeScore(by) {\r\n\tconst user = getLoggedInUser()\r\n\tif (!user) throw new Error('Not loggedIn')\r\n\tuser.score = user.score + by || by\r\n\tawait update(user)\r\n\treturn user.score\r\n}\r\n\r\nfunction saveLocalUser(user) {\r\n\tuser = { _id: user._id, fullname: user.fullname, imgUrl: user.imgUrl, score: user.score }\r\n\tsessionStorage.setItem(STORAGE_KEY_LOGGEDIN_USER, JSON.stringify(user))\r\n\treturn user\r\n}\r\n\r\nfunction getLoggedInUser() {\r\n\treturn JSON.parse(sessionStorage.getItem(STORAGE_KEY_LOGGEDIN_USER))\r\n}\r\n\r\n// ;(async ()=>{\r\n//     await userService.signup({fullname: 'Puki Norma', username: 'puki', password:'123',score: 10000, isAdmin: false})\r\n//     await userService.signup({fullname: 'Master Adminov', username: 'admin', password:'123', score: 10000, isAdmin: true})\r\n//     await userService.signup({fullname: 'Muki G', username: 'muki', password:'123', score: 10000})\r\n// })()\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}