{"ast":null,"code":"import { boardService } from '../services/board.service.local';\nimport { ADD_BOARD, REMOVE_BOARD, SET_BOARDS, UPDATE_BOARD } from './board.reducer';\nimport { store } from './store';\nexport async function loadBoards() {\n  try {\n    const boards = await boardService.query();\n    store.dispatch({\n      type: SET_BOARDS,\n      boards\n    });\n  } catch (err) {\n    console.log('Cannot load boards');\n    throw err;\n  }\n}\nexport async function removeBoard(boardId) {\n  try {\n    await boardService.remove(boardId);\n    store.dispatch({\n      type: REMOVE_BOARD,\n      boardId\n    });\n  } catch (err) {\n    console.log('Cannot remove board');\n    throw err;\n  }\n}\nexport async function addBoard(board) {\n  try {\n    const newBoard = await boardService.addBoard(board);\n    store.dispatch({\n      type: ADD_BOARD,\n      board: newBoard\n    });\n  } catch (err) {\n    console.log('Cannot add board');\n    throw err;\n  }\n}\nexport async function updateBoard(board) {\n  try {\n    const newBoard = await boardService.save(board);\n    store.dispatch({\n      type: UPDATE_BOARD,\n      board: newBoard\n    });\n  } catch (err) {\n    console.log('cannot update board');\n    throw err;\n  }\n}","map":{"version":3,"names":["boardService","ADD_BOARD","REMOVE_BOARD","SET_BOARDS","UPDATE_BOARD","store","loadBoards","boards","query","dispatch","type","err","console","log","removeBoard","boardId","remove","addBoard","board","newBoard","updateBoard","save"],"sources":["C:/Users/Roni/Desktop/Local Dev/Monday/dev/Sunday/frontend/src/store/board.actions.js"],"sourcesContent":["import { boardService } from '../services/board.service.local'\r\nimport { ADD_BOARD, REMOVE_BOARD, SET_BOARDS, UPDATE_BOARD } from './board.reducer'\r\nimport { store } from './store'\r\n\r\nexport async function loadBoards() {\r\n\ttry {\r\n\t\tconst boards = await boardService.query()\r\n\t\tstore.dispatch({ type: SET_BOARDS, boards })\r\n\t} catch (err) {\r\n\t\tconsole.log('Cannot load boards')\r\n\t\tthrow err\r\n\t}\r\n}\r\n\r\nexport async function removeBoard(boardId) {\r\n\ttry {\r\n\t\tawait boardService.remove(boardId)\r\n\t\tstore.dispatch({ type: REMOVE_BOARD, boardId })\r\n\t} catch (err) {\r\n\t\tconsole.log('Cannot remove board')\r\n\t\tthrow err\r\n\t}\r\n}\r\n\r\nexport async function addBoard(board) {\r\n\ttry {\r\n\t\tconst newBoard = await boardService.addBoard(board)\r\n\t\tstore.dispatch({ type: ADD_BOARD, board: newBoard })\r\n\t} catch (err) {\r\n\t\tconsole.log('Cannot add board')\r\n\t\tthrow err\r\n\t}\r\n}\r\n\r\nexport async function updateBoard(board) {\r\n\ttry {\r\n\t\tconst newBoard = await boardService.save(board)\r\n\t\tstore.dispatch({ type: UPDATE_BOARD, board: newBoard })\r\n\t} catch (err) {\r\n\t\tconsole.log('cannot update board')\r\n\t\tthrow err\r\n\t}\r\n}\r\n"],"mappings":"AAAA,SAASA,YAAY,QAAQ,iCAAiC;AAC9D,SAASC,SAAS,EAAEC,YAAY,EAAEC,UAAU,EAAEC,YAAY,QAAQ,iBAAiB;AACnF,SAASC,KAAK,QAAQ,SAAS;AAE/B,OAAO,eAAeC,UAAUA,CAAA,EAAG;EAClC,IAAI;IACH,MAAMC,MAAM,GAAG,MAAMP,YAAY,CAACQ,KAAK,CAAC,CAAC;IACzCH,KAAK,CAACI,QAAQ,CAAC;MAAEC,IAAI,EAAEP,UAAU;MAAEI;IAAO,CAAC,CAAC;EAC7C,CAAC,CAAC,OAAOI,GAAG,EAAE;IACbC,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC;IACjC,MAAMF,GAAG;EACV;AACD;AAEA,OAAO,eAAeG,WAAWA,CAACC,OAAO,EAAE;EAC1C,IAAI;IACH,MAAMf,YAAY,CAACgB,MAAM,CAACD,OAAO,CAAC;IAClCV,KAAK,CAACI,QAAQ,CAAC;MAAEC,IAAI,EAAER,YAAY;MAAEa;IAAQ,CAAC,CAAC;EAChD,CAAC,CAAC,OAAOJ,GAAG,EAAE;IACbC,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;IAClC,MAAMF,GAAG;EACV;AACD;AAEA,OAAO,eAAeM,QAAQA,CAACC,KAAK,EAAE;EACrC,IAAI;IACH,MAAMC,QAAQ,GAAG,MAAMnB,YAAY,CAACiB,QAAQ,CAACC,KAAK,CAAC;IACnDb,KAAK,CAACI,QAAQ,CAAC;MAAEC,IAAI,EAAET,SAAS;MAAEiB,KAAK,EAAEC;IAAS,CAAC,CAAC;EACrD,CAAC,CAAC,OAAOR,GAAG,EAAE;IACbC,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;IAC/B,MAAMF,GAAG;EACV;AACD;AAEA,OAAO,eAAeS,WAAWA,CAACF,KAAK,EAAE;EACxC,IAAI;IACH,MAAMC,QAAQ,GAAG,MAAMnB,YAAY,CAACqB,IAAI,CAACH,KAAK,CAAC;IAC/Cb,KAAK,CAACI,QAAQ,CAAC;MAAEC,IAAI,EAAEN,YAAY;MAAEc,KAAK,EAAEC;IAAS,CAAC,CAAC;EACxD,CAAC,CAAC,OAAOR,GAAG,EAAE;IACbC,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;IAClC,MAAMF,GAAG;EACV;AACD"},"metadata":{},"sourceType":"module","externalDependencies":[]}